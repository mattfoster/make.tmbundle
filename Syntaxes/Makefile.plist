<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>comment</key>
	<string>TODO: pull common parts into repository, add support for other gnu make bits and bobs, consider splitting into gnu/bsd make grammars</string>
	<key>fileTypes</key>
	<array>
		<string>GNUmakefile</string>
		<string>makefile</string>
		<string>Makefile</string>
		<string>OCamlMakefile</string>
	</array>
	<key>keyEquivalent</key>
	<string>^~M</string>
	<key>name</key>
	<string>Makefile</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>begin</key>
			<string>^\s*((\w|[-_\.])+)\s*\??=</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.other.makefile</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>should not include all of makefile. eg. I dont think a = b = c works.</string>
			<key>end</key>
			<string>$</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\\n</string>
				</dict>
				<dict>
					<key>include</key>
					<string>source.makefile</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>`</string>
			<key>end</key>
			<string>`</string>
			<key>name</key>
			<string>string.interpolated.backtick.makefile</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>source.shell</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>#</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.comment.makefile</string>
				</dict>
			</dict>
			<key>end</key>
			<string>$\n?</string>
			<key>name</key>
			<string>comment.line.number-sign.makefile</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&lt;!\\)\\$\n</string>
					<key>name</key>
					<string>punctuation.separator.continuation.makefile</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>"</string>
			<key>comment</key>
			<string>it seems to be possible to instert make syntax into strings.</string>
			<key>end</key>
			<string>"</string>
			<key>name</key>
			<string>string.quoted.double.makefile</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>source.makefile</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>match</key>
			<string>[\b\s+](\+:?\??\=)</string>
			<key>name</key>
			<string>punctuation.definition.variable.makefile</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>(define)\s+([\w\s]+)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.makefile</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>variable.define.macro.makefile</string>
				</dict>
			</dict>
			<key>end</key>
			<string>endef</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>keyword.control.makefile</string>
				</dict>
			</dict>
			<key>name</key>
			<string></string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>source.makefile</string>
				</dict>
				<dict>
					<key>include</key>
					<string>source.shell</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>(\$\()(\w+)\b\s+</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>constant.variable.expansion.makefile</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.function.string.makefile</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>meta / constant  used here for colouring.</string>
			<key>end</key>
			<string>(\))</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>constant.variable.expansion.makefile</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.parenthesis.function.makefile</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>source.makefile</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>(\${)(\w+)\b\s+</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.variable.expansion.makefile</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.function.string.makefile</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(})</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.variable.expansion.makefile</string>
				</dict>
			</dict>
			<key>name</key>
			<string>markup.braces.function.makefile</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>source.makefile</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.variable.expansion.makefile</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>variable.other.makefile</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>variable.variable.expansion.makefile</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(\${)(\w+)(})</string>
			<key>name</key>
			<string>markup.braces.expansion.makefile</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.variable.expansion.makefile</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>variable.other.makefile</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>variable.variable.expansion.makefile</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(\$\()(\w+)(\))</string>
			<key>name</key>
			<string>markup.parenthesis.expansion.makefile</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(\$[@\*])</string>
			<key>name</key>
			<string>entity.parameter.target.makefile</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(\$[\^\+&lt;\?])</string>
			<key>name</key>
			<string>storage.parameter.prerequisite.makefile</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(\$[%])</string>
			<key>name</key>
			<string>keyword.parameter.misc.makefile</string>
		</dict>
		<dict>
			<key>match</key>
			<string>^(\s*)\b(\-??\.?include|ifeq|ifneq|ifdef|ifndef|else|endif|vpath|export|unexport)\b</string>
			<key>name</key>
			<string>keyword.control.makefile</string>
		</dict>
		<dict>
			<key>match</key>
			<string>^\t\s*$</string>
			<key>name</key>
			<string>invalid.deprecated.opaque-rule-continuation.makefile</string>
		</dict>
		<dict>
			<key>match</key>
			<string>^(\s*)\b(\-??\.?override)</string>
			<key>name</key>
			<string>storage.modifier.override.makefile</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.makefile</string>
				</dict>
			</dict>
			<key>match</key>
			<string>^([^\t ]+:(?!\=))\s*.*</string>
			<key>name</key>
			<string>meta.function.makefile</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\\(\s+)$\n</string>
			<key>name</key>
			<string>invalid.illegal.continuation</string>
		</dict>
	</array>
	<key>scopeName</key>
	<string>source.makefile</string>
	<key>uuid</key>
	<string>FF1825E8-6B1C-11D9-B883-000D93589AF6</string>
</dict>
</plist>
